<?php

namespace PHPCParser;

use PHPCParser\Node\Stmt\ValueStmt\Expr;


/* This is an automatically GENERATED file, which should not be manually edited.
 */
class Parser extends ParserAbstract
{
    protected int $tokenToSymbolMapSize = 334;
    protected int $actionTableSize      = 570;
    protected int $gotoTableSize        = 380;

    protected int $invalidSymbol       = 103;
    protected int $errorSymbol         = 1;
    protected int $defaultAction       = -32766;
    protected int $unexpectedTokenRule = 32767;

    protected int $YY2TBLSTATE = 189;
    protected int $numNonLeafStates  = 316;

    protected array $symbolToName = array(
        "EOF",
        "error",
        "IDENTIFIER",
        "I_CONSTANT",
        "F_CONSTANT",
        "STRING_LITERAL",
        "FUNC_NAME",
        "SIZEOF",
        "ASM",
        "PTR_OP",
        "INC_OP",
        "DEC_OP",
        "LEFT_OP",
        "RIGHT_OP",
        "LE_OP",
        "GE_OP",
        "EQ_OP",
        "NE_OP",
        "AND_OP",
        "OR_OP",
        "MUL_ASSIGN",
        "DIV_ASSIGN",
        "MOD_ASSIGN",
        "ADD_ASSIGN",
        "SUB_ASSIGN",
        "LEFT_ASSIGN",
        "RIGHT_ASSIGN",
        "AND_ASSIGN",
        "XOR_ASSIGN",
        "OR_ASSIGN",
        "TYPEDEF_NAME",
        "ENUMERATION_CONSTANT",
        "TYPEDEF",
        "EXTERN",
        "STATIC",
        "AUTO",
        "REGISTER",
        "INLINE",
        "ATTRIBUTE",
        "CONST",
        "RESTRICT",
        "VOLATILE",
        "BOOL",
        "CHAR",
        "SHORT",
        "INT",
        "LONG",
        "SIGNED",
        "UNSIGNED",
        "INT128",
        "FLOAT",
        "DOUBLE",
        "FLOAT128",
        "VOID",
        "COMPLEX",
        "IMAGINARY",
        "STRUCT",
        "UNION",
        "ENUM",
        "ELLIPSIS",
        "CASE",
        "DEFAULT",
        "IF",
        "ELSE",
        "SWITCH",
        "WHILE",
        "DO",
        "FOR",
        "GOTO",
        "CONTINUE",
        "BREAK",
        "RETURN",
        "ALIGNAS",
        "ALIGNOF",
        "ATOMIC",
        "GENERIC",
        "NORETURN",
        "STATIC_ASSERT",
        "THREAD_LOCAL",
        "'('",
        "')'",
        "','",
        "':'",
        "'['",
        "']'",
        "'.'",
        "'{'",
        "'}'",
        "'&'",
        "'*'",
        "'+'",
        "'-'",
        "'~'",
        "'!'",
        "'/'",
        "'%'",
        "'<'",
        "'>'",
        "'^'",
        "'|'",
        "'?'",
        "'='",
        "';'"
    );

    protected array $tokenToSymbol = array(
            0,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,   93,  103,  103,  103,   95,   88,  103,
           79,   80,   89,   90,   81,   91,   85,   94,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,   82,  102,
           96,  101,   97,  100,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,   83,  103,   84,   98,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,   86,   99,   87,   92,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
          103,  103,  103,  103,  103,  103,    1,    2,    3,    4,
            5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
           15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
           25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
           55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
           65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
           75,   76,   77,   78
    );

    protected array $action = array(
          237,  322,  323,  326,  327,  117,  315,    1,  118,  119,
          213,  393,  394,  395,  396,  397,  398,  399,  400,  401,
          402,    0,   65,  233,  339,  340,  482,  483,  484,  324,
           88,  229,  269,   61,-32766,-32766,-32766,-32766,-32766,-32766,
          105,  106,  227,  237,  322,  323,  326,  327,  117,  315,
          268,  118,  119,   88,  128,  269,   61,  562,   84,  238,
          239,  485,  240,  241,   16,  242,  243,  244,  245,   67,
          228,  214,  324,  215,-32766,  459,  122,    4,-32766,-32766,
        -32766,  109,  110,  325,    1,  584,  352,  353,  354,  355,
          356,  357,  392,   66,  189,  526,   98,   73,  631,  234,
          590,   84,  238,  239,   90,  240,  241,   16,  242,  243,
          244,  245,   67,-32766,  214,   88,  215,  269,   61,  342,
            4,  338,  107,  108,  458,  632,   43,    1,  585,  352,
          353,  354,  355,  356,  357,  114,  207,  103,  104,  337,
          115,  116,  448,  590,  425,  426,  427,  429,  430,  486,
          208,  482,  483,  484,  442,  432,  433,  434,  435,  440,
          441,  436,  437,  438,  439,  431,  443,  444,  454,  455,
          149,  317,  322,  323,  326,  327,  117,   74,    9,  118,
          119,   88,   35,  269,  209,   59,  210,  572,  487,  211,
          428,  561,  534,-32766,-32766,-32766,-32766,-32766,-32766,  568,
          324,-32766,-32766,-32766,-32766,-32766,-32766,  317,  322,  323,
          326,  327,  117,  533,  129,  118,  119,-32766,  623,    9,
          193,    8,  291,   35,  503,   35,   60,-32766,  146,  122,
          197,-32766,  341,-32766,  472,  407,  324,-32766,-32766,-32766,
          622,-32766,  214,   99,  215,-32766,-32766,-32766,    4,   48,
          252,  206,  504,  208,  482,  483,  484,  352,  353,  354,
          355,  356,  357,  317,  322,  323,  326,  327,  117,  517,
          272,  118,  119,  208,  482,  483,  484,  147,  214,  237,
          215,  265,   12,  474,    4,  315,   34,  270,-32766,  485,
          287,  516,  324,  352,  353,  354,  355,  356,  357,  506,
          297,  130,   14,  303,  250,  308,   36,  590,    8,  485,
          619,  122,   35,  336,   91,-32766,-32766,-32766,-32766,-32766,
        -32766,  618,-32766,-32766,-32766,-32766,-32766,-32766, -188,  503,
          328,   47,  111,  112,  214,  208,  215,   84,  238,  239,
            4,  240,  241,   16,  242,  243,  244,  245,   67,  352,
          353,  354,  355,  356,  357,-32766,  225,  288,  247,-32766,
            3,-32766,-32766,    1,   25,-32766,-32766,  285,-32766,   20,
          195,-32766,-32766,-32766,-32766,-32766,-32766,  199,    7,  590,
          507,-32766,-32766,-32766,-32766,-32766,-32766,   54,   49,   55,
           75,   76,  208,  482,  483,  484,   50,   77,   78,   17,
          208,  482,  483,  484,-32766,   79,    8,  193,   80,   81,
           35,-32766,   82,   83,  144,-32766,  122,-32766,   21,  212,
          246,-32766,  271,    5,    6,-32766,  200,-32766,  485,   19,
          514,   22,   26,   27,  101,   89,  485,   72,  541,  208,
          482,  483,  484,  263,  196,  198,  549,  201,   92,  277,
          278,  282,  208,  482,  483,  484,   94,  284,  301,  306,
          208,  482,  483,  484,  488,  489,  481,  505,  493,  320,
          515,  492,  351,  540,  497,  485,  498,  615,  614,  230,
           23,   44,   24,  335,   65,  513,   15,   46,  485,  235,
          274,  307,  312,  314,   86,   45,  485,   93,  547,   95,
           96,  194,  202,  203,  102,  204,  555,  205,   97,   90,
           62,    0,  542,  548,  509,  510,  512,  544,  546,  550,
          556,  571,  508,  511,  543,  545,  552,  553,  551,  554,
          334,    0,    0,  190,    1,   61,    0,  473,  475,    0,
            0,  122,-32766,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  100,    0,    0,   85, -175,    0,  602,
          603,  601,  573,  634,  596,  591,  605,  406,  590,  604
    );

    protected array $actionCheck = array(
            2,    3,    4,    5,    6,    7,    8,   86,   10,   11,
            2,   20,   21,   22,   23,   24,   25,   26,   27,   28,
           29,    0,  101,    9,   10,   11,   39,   40,   41,   31,
           83,    2,   85,   86,   32,   33,   34,   35,   36,   37,
           14,   15,    2,    2,    3,    4,    5,    6,    7,    8,
            2,   10,   11,   83,   81,   85,   86,   87,   60,   61,
           62,   74,   64,   65,   66,   67,   68,   69,   70,   71,
           30,   73,   31,   75,   72,  102,   89,   79,   76,   77,
           78,   12,   13,    2,   86,   87,   88,   89,   90,   91,
           92,   93,  101,   79,   86,   59,   19,   83,   41,   85,
          102,   60,   61,   62,   82,   64,   65,   66,   67,   68,
           69,   70,   71,   77,   73,   83,   75,   85,   86,   87,
           79,    2,   96,   97,  102,   68,   86,   86,   87,   88,
           89,   90,   91,   92,   93,   89,   79,   16,   17,    2,
           94,   95,   30,  102,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
           58,    2,    3,    4,    5,    6,    7,  100,   79,   10,
           11,   83,   83,   85,   72,   81,   74,    2,   76,   77,
           78,   87,    2,   32,   33,   34,   35,   36,   37,  101,
           31,   32,   33,   34,   35,   36,   37,    2,    3,    4,
            5,    6,    7,    2,   81,   10,   11,   77,    2,   79,
           80,   79,   61,   83,    2,   83,   81,   77,   81,   89,
           80,   89,   87,   72,   87,  102,   31,   76,   77,   78,
            2,   72,   73,   18,   75,   76,   77,   78,   79,   34,
           80,   81,   30,   38,   39,   40,   41,   88,   89,   90,
           91,   92,   93,    2,    3,    4,    5,    6,    7,   80,
           81,   10,   11,   38,   39,   40,   41,   81,   73,    2,
           75,    5,   79,   87,   79,    8,   83,    5,   77,   74,
            5,   80,   31,   88,   89,   90,   91,   92,   93,   84,
            5,   79,   79,    5,   89,    5,   83,  102,   79,   74,
            5,   89,   83,   80,   81,   32,   33,   34,   35,   36,
           37,    5,   32,   33,   34,   35,   36,   37,    8,    2,
           80,   81,   90,   91,   73,   38,   75,   60,   61,   62,
           79,   64,   65,   66,   67,   68,   69,   70,   71,   88,
           89,   90,   91,   92,   93,   72,    8,   30,    8,   76,
           79,   78,   72,   86,   63,   77,   76,   65,   78,   80,
           87,   32,   33,   34,   35,   36,   37,   87,   79,  102,
           84,   32,   33,   34,   35,   36,   37,   79,   34,   79,
           79,   79,   38,   39,   40,   41,   34,   79,   79,   82,
           38,   39,   40,   41,   77,   79,   79,   80,   79,   79,
           83,   72,   79,   79,   79,   76,   89,   78,   80,   79,
           79,   72,   79,   79,   79,   76,   87,   78,   74,   82,
           84,   80,   80,   80,   98,   34,   74,   80,   84,   38,
           39,   40,   41,   89,   80,   80,   84,   80,   34,   80,
           80,   89,   38,   39,   40,   41,   34,   80,   80,   80,
           38,   39,   40,   41,   80,   80,   80,   80,   80,   80,
           80,   80,   80,   80,   80,   74,   80,   80,   80,   80,
           80,   86,   80,   80,  101,   84,   81,   81,   74,   81,
           89,   81,   81,   81,   81,   86,   74,   82,   84,   82,
           82,   82,   82,   82,   88,   82,   84,   82,   82,   82,
           86,   -1,   84,   84,   84,   84,   84,   84,   84,   84,
           84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
           84,   -1,   -1,   86,   86,   86,   -1,   87,   87,   -1,
           -1,   89,   89,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   99,   -1,   -1,  101,  101,   -1,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102
    );

    protected array $actionBase = array(
          112,   -2,   41,  205,  169,  169,  169,  169,  327,  140,
          -79,   21,  211,  448,  150,   36,  277,  277,  277,  277,
          277,  277,  277,  277,  277,  277,  277,  277,  288,  288,
          288,  288,  288,  288,  215,  354,  362,  401,  414,  422,
          283,  290,  339,  349,  349,  349,  161,  161,  235,  235,
          235,  235,  235,  235,    2,    2,    2,    2,    2,  -30,
           32,  -53,  -53,  466,  466,  449,  403,  467,  449,  400,
          402,  449,  424,  261,  261,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  261,  261,  261,  344,  345,  345,
           -9,   22,  -13,  -13,   14,  465,  465,  229,  427,  222,
          222,  142,   26,   26,   26,  452,  453,   98,   40,   46,
           46,   46,   57,  348,  399,  456,  450,  451,   99,    8,
          133,  203,  147,  242,   69,  121,   77,  203,  170,  196,
          389,  223,  463,  189,  233,  446,  242,  242,   69,   69,
           69,   69,  121,  426,  223,  464,  104,  -27,  394,  289,
          338,  351,  250,  145,  379,  352,  353,  397,  398,   81,
           81,  297,  297,  297,  297,  297,  297,  297,  297,  297,
          297,  297,  298,  298,  305,  216,   29,  295,  340,  299,
          308,  333,  335,  447,  310,  334,  384,  416,  336,  454,
          225,  385,  386,  408,  387,  341,  350,  395,  409,  311,
          388,  455,  357,  119,  137,  276,  383,  419,  317,  312,
          318,  319,  281,   48,  457,  458,  282,  343,  390,  405,
          296,  346,  391,  369,  370,  392,  406,  416,  336,  454,
          225,  364,  393,  428,  429,  377,  347,  302,  459,  185,
          365,  285,  190,  430,  431,  432,  415,  424,  424,  433,
          434,  367,  435,  436,  460,  326,  437,  396,  320,  438,
          439,  417,  418,  440,  441,  442,  443,  420,  378,  444,
          445,  461,  301,  329,  410,  421,  462,  300,  330,  423,
          411,  425,  316,  412,  238,    0,    0,  112,  112,  112,
          112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
          112,  112,  261,  261,  261,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  112,  112,  112,  112,  112,  112,
          261,  261,  261,  261,  261,  261,  112,  112,  112,  112,
          112,  112,  112,  112,  261,  261,  261,  261,  261,  261,
          112,  112,  112,  112,  112,  261,  261,  261,  261,  261,
          261,  261,  261,  261,  261,  261,  261,  261,  261,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  261,  261,  261,    0,  222,  297,  297,
            0,  222,  222,  222,  222,    0,    0,  222,    0,    0,
            0,   99,  222,    0,    0,    0,    0,    0,    0,  297,
           29,  297,   81,   81,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  413,    0,  413,    0,
            0,  413,    0,    0,    0,    0,    0,    0,    0,  413,
            0,  413,    0,    0,  413,  413,  413,  413,    0,    0,
          413,  413,  413,  413,  413
    );

    protected array $actionDefault = array(
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          108,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,   94,   96,
           98,  100,  102,  104,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  146,  148,  150,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
           42,32767,  205,  203,   29,32767,32767,  216,32767,32767,
        32767,  222,   59,   60,   61,  220,32767,32767,32767,   48,
           49,   50,32767,  175,32767,  164,32767,32767,  222,32767,
        32767,  186,32767,   51,   54,   62,   72,  185,32767,32767,
        32767,  223,32767,32767,32767,32767,   52,   53,   57,   58,
           55,   56,   63,32767,  221,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  175,  175,  175,  175,  175,  175,  175,  175,  175,
          175,  175,  301,  301,  305,  309,32767,32767,32767,32767,
          169,32767,32767,  160,32767,32767,32767,   64,   66,   68,
           70,32767,32767,32767,32767,32767,  184,  135,  137,  180,
        32767,32767,32767,32767,32767,32767,  108,    1,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  211,
           37,32767,32767,32767,32767,32767,32767,   65,   67,   69,
           71,32767,32767,   37,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,   37,32767,  155,   34,32767,32767,
        32767,32767,   37,32767,32767,32767,32767,32767,  132,32767,
        32767,32767,32767,32767,32767,32767,32767,  310,32767,32767,
        32767,32767,  277,32767,  300,  311,32767,32767,32767,  312,
          304,  313,32767,  308,32767,  317
    );

    protected array $goto = array(
           58,   58,   58,   58,  267,  583,  581,  582,  302,  594,
          595,  599,  597,  592,  600,  598,  531,  160,  160,  160,
          168,  169,  170,  171,  535,   57,   57,   57,   57,  587,
          524,  524,  524,  525,  525,  525,   58,   58,   58,   58,
           58,   58,   58,   58,  524,  524,  524,  525,  525,  525,
           58,   58,   58,   58,   58,  522,  522,  522,  523,  523,
          523,   57,   57,   57,   57,   57,   57,   57,   57,  522,
          522,  522,  523,  523,  523,   57,   57,   57,   57,   57,
          175,  607,  185,  186,  224,  330,  165,  173,  178,  179,
          180,  181,  184,  187,  188,   41,   42,  251,  264,  283,
          275,  280,  296,  174,  460,  460,  460,  460,  460,  460,
          529,  273,  279,  295,  289,  293,  299,  183,  524,  525,
          174,  157,  563,  563,  563,  563,  157,  609,  563,  343,
           63,  563,  611,  358,  563,  610,  259,  612,  609,  192,
          613,  192,  260,  522,  523,  248,  256,  281,  258,  404,
          391,  257,  290,  125,  344,  294,  172,  300,  332,  331,
          468,  127,  127,  422,  125,  127,  570,  127,  127,  159,
          232,  253,  254,  216,   68,   68,  131,  148,  456,  456,
          456,  409,  411,  413,  415,  417,  419,  192,  192,  192,
          192,  192,  192,  192,  192,  192,  192,  192,  358,  133,
          134,   10,  236,  530,  231,  236,  224,  309,  358,   64,
          358,  358,  166,  167,  358,  495,  358,  140,  141,  358,
          222,  255,    0,  358,  358,  358,  358,  358,  358,  358,
          358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
          358,  358,  358,  349,  346,  347,   56,   56,   56,   56,
          138,  490,  557,   18,  449,  558,  559,  499,  450,  452,
          560,  121,  121,  121,  121,  121,  121,  405,    0,   69,
           70,  477,  477,    0,    0,    0,    0,  461,  463,  465,
          359,    0,   56,   56,   56,   56,   56,   56,   56,   56,
          520,  518,   38,   39,    0,  131,   56,   56,   56,   56,
           56,    0,    0,  148,    0,   51,   52,   53,  223,    0,
          266,  479,    0,    0,  286,    0,  469,    0,    0,  470,
            0,  348,  361,  362,  363,  565,  565,    0,    0,  423,
            0,    0,  564,    0,    0,  566,    0,    0,    0,    0,
            0,    0,  405,    0,  405,  405,    0,    0,  405,    0,
          405,    0,    0,  405,    0,    0,    0,  389,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  123
    );

    protected array $gotoCheck = array(
           40,   40,   40,   40,   71,   71,   71,   71,   71,   71,
           71,   71,   71,   71,   71,   71,   66,    5,    5,    5,
           20,   20,   20,   20,   66,   37,   37,   37,   37,   80,
           40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
           40,   40,   40,   40,   40,   37,   37,   37,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
            5,   81,    5,    5,   42,   10,    5,    5,    5,    5,
            5,    5,    5,    5,    5,   49,   49,    8,    8,    8,
            8,    8,    8,   67,   34,   34,   34,   34,   34,   34,
           65,    8,    8,    8,    8,    8,    8,   14,   40,   40,
           67,   60,    8,    8,    8,    8,   60,   31,    8,    8,
           31,    8,   73,   15,    8,   73,   25,   31,   31,   40,
           31,   40,   26,   37,   37,   62,    8,   62,   24,    8,
            8,   23,    8,   32,    8,    8,   22,    8,    8,    8,
           53,   32,   32,   41,   32,   32,   70,   32,   32,   54,
           11,   11,   11,   11,   68,   68,   59,   59,   50,   50,
           50,   32,   32,   32,   32,   32,   32,   40,   40,   40,
           40,   40,   40,   40,   40,   40,   40,   40,   15,   21,
           21,   42,   42,   42,   48,   42,   42,   85,   15,   74,
           15,   15,   19,   19,   15,   57,   15,   18,   18,   15,
           11,   11,   -1,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   36,   36,   36,   36,
           48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
           48,   51,   51,   51,   51,   51,   51,   28,   -1,   74,
           74,   55,   55,   -1,   -1,   -1,   -1,   51,   51,   51,
           17,   -1,   36,   36,   36,   36,   36,   36,   36,   36,
           59,   59,   61,   61,   -1,   59,   36,   36,   36,   36,
           36,   -1,   -1,   59,   -1,   61,   61,   61,   30,   -1,
           30,   30,   -1,   -1,   30,   -1,   30,   -1,   -1,   30,
           -1,   17,   17,   17,   17,   43,   43,   -1,   -1,   43,
           -1,   -1,   43,   -1,   -1,   43,   -1,   -1,   -1,   -1,
           -1,   -1,   28,   -1,   28,   28,   -1,   -1,   28,   -1,
           28,   -1,   -1,   28,   -1,   -1,   -1,   28,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61
    );

    protected array $gotoBase = array(
            0,    0,    0,    0,    0,   13,    0,    0,   63,    0,
           38,  166,    0,    0,   55,  126,    0,  208,  106,  103,
          -85,   96,   54,   50,   48,   37,   44,    0,  260,    0,
          226,  127,  153,    0,   64,    0,  242,   21,    0,    0,
           -4,   34,   76,  264,    0,    0,    0,    0,   59,   51,
          135,  221,    0,   32,  -21,   82,    0,    9,    0,  168,
          -10,  257,  133,    0,    0,   95, -111,  -28,  113,    0,
           29,  -12,    0,  122,  206,    0,    0,    0,    0,    0,
           27,   70,    0,    0,    0,    4,    0,    0,    0,    0,
            0,    0
    );

    protected array $gotoDefault = array(
        -32768,   11,  333,  318,  319,  162,  321,  145,  403,  182,
          329,  292,  124,  164,  176,  120,  113,  360,  139,  153,
          154,  132,  155,  217,  218,  219,  220,  156,  390,   87,
          221,  588,  126,  150,  408,   28,   29,   30,   31,   32,
           33,  421,  276,  567,  445,  446,  447,  191,  226,   40,
          457,  135,  177,  467,  152,  478,  158,  494,  143,  136,
          151,   37,  261,  163,  249,  528,  262,  161,   71,  137,
          569,  589,  574,  575,  576,  577,  578,  579,  580,    2,
          586,  606,  608,   13,  304,  305,  310,  311,  313,  630,
          298,  142
    );

    protected array $ruleToNonTerminal = array(
            0,    2,    2,    2,    2,    2,    3,    3,    3,    7,
            4,    4,    6,    9,    9,   10,   10,   12,   12,   12,
           12,   12,   12,   12,   12,   12,   12,   13,   13,   15,
           15,   15,   15,   15,   15,   15,   16,   16,   16,   16,
           16,   16,   17,   17,   18,   18,   18,   18,   19,   19,
           19,   20,   20,   20,   21,   21,   21,   21,   21,   22,
           22,   22,   23,   23,   24,   24,   25,   25,   26,   26,
           27,   27,   28,   28,    8,    8,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,    5,    5,   30,
           31,   31,   31,   32,   32,   32,   32,   32,   32,   32,
           32,   32,   32,   32,   32,   33,   33,   41,   41,   35,
           35,   35,   35,   35,   35,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   45,   45,   45,   45,   45,   47,   47,
           49,   49,   50,   50,   50,   51,   51,   51,   51,   51,
           51,   52,   52,   53,   53,   53,   46,   46,   46,   46,
           46,   54,   54,   55,   55,   44,   37,   37,   37,   37,
           38,   38,   39,   39,   48,   48,   40,   40,   56,   56,
           57,   57,   42,   42,   42,   58,   58,   60,   60,   60,
           60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
           60,   60,   59,   59,   59,   59,   61,   61,   61,   61,
           62,   62,   64,   64,   65,   65,   65,   63,   63,   11,
           11,   66,   66,   66,   67,   67,   67,   67,   67,   67,
           67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
           67,   67,   67,   67,   67,   43,   43,   43,   14,   14,
           14,   14,   68,   69,   69,   70,   70,   34,   71,   71,
           71,   71,   71,   71,   71,   72,   72,   72,   73,   73,
           79,   79,   80,   80,   74,   74,   75,   75,   75,   76,
           76,   76,   76,   76,   76,   77,   77,   77,   77,   77,
            1,    1,   81,   81,   82,   82,   83,   83,   84,   84,
           85,   85,   86,   86,   87,   87,   88,   88,   89,   89,
           90,   90,   90,   90,   90,   91,   91,   91,   78
    );

    protected array $ruleToLength = array(
            1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
            1,    1,    6,    1,    3,    3,    3,    1,    4,    3,
            4,    3,    3,    2,    2,    6,    7,    1,    3,    1,
            2,    2,    2,    2,    4,    4,    1,    1,    1,    1,
            1,    1,    1,    4,    1,    3,    3,    3,    1,    3,
            3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
            3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
            1,    3,    1,    5,    1,    3,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
            2,    3,    1,    2,    1,    2,    1,    2,    1,    2,
            1,    2,    1,    2,    1,    1,    3,    3,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    6,    7,    3,    7,    3,    1,    1,
            1,    2,    2,    3,    1,    2,    1,    2,    1,    2,
            1,    1,    3,    2,    3,    1,    4,    5,    5,    6,
            2,    1,    3,    4,    1,    4,    1,    1,    1,    1,
            1,    1,    4,    4,    2,    0,    6,    5,    1,    3,
            1,    4,    6,    6,    2,    2,    1,    1,    1,    3,
            3,    4,    6,    5,    5,    6,    5,    4,    4,    4,
            3,    4,    3,    2,    2,    1,    1,    2,    1,    2,
            3,    1,    1,    3,    2,    2,    1,    1,    3,    2,
            1,    2,    1,    1,    3,    2,    3,    5,    4,    5,
            4,    3,    3,    3,    4,    6,    5,    5,    6,    4,
            4,    3,    4,    4,    5,    3,    4,    1,    2,    1,
            4,    3,    2,    1,    2,    3,    2,    7,    1,    1,
            1,    1,    1,    1,    1,    4,    4,    3,    2,    3,
            1,    2,    1,    1,    1,    2,    7,    5,    5,    5,
            7,    6,    7,    6,    7,    3,    2,    2,    2,    3,
            1,    2,    1,    1,    4,    3,    1,    2,    6,    4,
            1,    0,    3,    1,    1,    0,    3,    1,    1,    0,
            1,    3,    5,    7,    9,    2,    2,    0,    6
    );

    protected function initReduceCallbacks() {
        $this->reduceCallbacks = [
            0 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            1 => function ($stackPos) {
                 $this->semValue = new Expr\DeclRefExpr($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            2 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            3 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            4 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)]; 
            },
            5 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            6 => function ($stackPos) {
                 $this->semValue = new Expr\IntegerLiteral($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            7 => function ($stackPos) {
                 $this->semValue = new Expr\FloatLiteral($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            8 => function ($stackPos) {
                 $this->semValue = new Expr\DeclRefExpr($this->semStack[$stackPos-(1-1)], $this->scope->enum($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            9 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            10 => function ($stackPos) {
                 $this->semValue = new Expr\StringLiteral($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            11 => function ($stackPos) {
                 $this->semValue = new Expr\FuncName($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            12 => function ($stackPos) {
                 throw new Error('generic not implemented'); 
            },
            13 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            14 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            15 => function ($stackPos) {
                 throw new Error('generic association typename not implemented'); 
            },
            16 => function ($stackPos) {
                 throw new Error('generic association default not implemented'); 
            },
            17 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            18 => function ($stackPos) {
                 $this->semValue = new Expr\DimFetchExpr($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            19 => function ($stackPos) {
                 $this->semValue = new Expr\CallExpr($this->semStack[$stackPos-(3-1)], [], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            20 => function ($stackPos) {
                 $this->semValue = new Expr\CallExpr($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            21 => function ($stackPos) {
                 $this->semValue = new Expr\StructRefExpr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            22 => function ($stackPos) {
                 $this->semValue = new Expr\StructDerefExpr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            23 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-1)], Expr\UnaryOperator::KIND_POSTINC, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            24 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-1)], Expr\UnaryOperator::KIND_POSTDEC, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            25 => function ($stackPos) {
                 $this->semValue = new Expr\InitializerExpr($this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-2)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            26 => function ($stackPos) {
                 $this->semValue = new Expr\InitializerExpr($this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            27 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            28 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            29 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            30 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-2)], Expr\UnaryOperator::KIND_PREINC, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            31 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-2)], Expr\UnaryOperator::KIND_PREDEC, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            32 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            33 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(2-2)], Expr\UnaryOperator::KIND_SIZEOF, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            34 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(4-3)], Expr\UnaryOperator::KIND_SIZEOF, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            35 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryOperator($this->semStack[$stackPos-(4-3)], Expr\UnaryOperator::KIND_ALIGNOF, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            36 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_ADDRESS_OF; 
            },
            37 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_DEREF; 
            },
            38 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_PLUS; 
            },
            39 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_MINUS; 
            },
            40 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_BITWISE_NOT; 
            },
            41 => function ($stackPos) {
                 $this->semValue = Expr\UnaryOperator::KIND_LOGICAL_NOT; 
            },
            42 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            43 => function ($stackPos) {
                 $this->semValue = new Expr\CastExpr($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            44 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            45 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_MUL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            46 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_DIV, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            47 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_REM, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            48 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            49 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_ADD, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            50 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_SUB, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            51 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            52 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_SHL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            53 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_SHR, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            54 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            55 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_LT, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            56 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_GT, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            57 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_LE, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            58 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_GE, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            59 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            60 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_EQ, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            61 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_NE, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            62 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            63 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_BITWISE_AND, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            64 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            65 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_BITWISE_XOR, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            66 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            67 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_BITWISE_OR, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            68 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            69 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_LOGICAL_AND, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            70 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            71 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_LOGICAL_OR, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            72 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            73 => function ($stackPos) {
                 $this->semValue = new Expr\AbstractConditionalOperator\ConditionalOperator($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            74 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            75 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            76 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_ASSIGN; 
            },
            77 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_MUL_ASSIGN; 
            },
            78 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_DIV_ASSIGN; 
            },
            79 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_REM_ASSIGN; 
            },
            80 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_ADD_ASSIGN; 
            },
            81 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_SUB_ASSIGN; 
            },
            82 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_SHL_ASSIGN; 
            },
            83 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_SHR_ASSIGN; 
            },
            84 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_AND_ASSIGN; 
            },
            85 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_XOR_ASSIGN; 
            },
            86 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOperator::KIND_OR_ASSIGN; 
            },
            87 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            88 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOperator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Expr\BinaryOperator::KIND_COMMA, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            89 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            90 => function ($stackPos) {
                 $this->semValue = new IR\Declaration($this->semStack[$stackPos-(2-1)][0], $this->semStack[$stackPos-(2-1)][1], $this->semStack[$stackPos-(2-1)][2], [], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            91 => function ($stackPos) {
                 $this->semValue = new IR\Declaration($this->semStack[$stackPos-(3-1)][0], $this->semStack[$stackPos-(3-1)][1], $this->semStack[$stackPos-(3-1)][2], $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            92 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            93 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[0] |= $this->semStack[$stackPos-(2-1)]; 
            },
            94 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], [], []]; 
            },
            95 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; array_unshift($this->semValue[2], $this->semStack[$stackPos-(2-1)]); 
            },
            96 => function ($stackPos) {
                 $this->semValue = [0, [], [$this->semStack[$stackPos-(1-1)]]]; 
            },
            97 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[0] |= $this->semStack[$stackPos-(2-1)]; 
            },
            98 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], [], []]; 
            },
            99 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[0] |= $this->semStack[$stackPos-(2-1)]; 
            },
            100 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], [], []]; 
            },
            101 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[0] |= $this->semStack[$stackPos-(2-1)]; 
            },
            102 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], [], []]; 
            },
            103 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[1][] = $this->semStack[$stackPos-(2-1)]; 
            },
            104 => function ($stackPos) {
                 $this->semValue = [0, [$this->semStack[$stackPos-(1-1)]], []]; 
            },
            105 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            106 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            107 => function ($stackPos) {
                 $this->semValue = new IR\InitDeclarator($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            108 => function ($stackPos) {
                 $this->semValue = new IR\InitDeclarator($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            109 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_TYPEDEF; 
            },
            110 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_EXTERN; 
            },
            111 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_STATIC; 
            },
            112 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_THREAD_LOCAL; 
            },
            113 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_AUTO; 
            },
            114 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_REGISTER; 
            },
            115 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            116 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            117 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            118 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            119 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            120 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            121 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            122 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            123 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            124 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            125 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            126 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            127 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            128 => function ($stackPos) {
                 $this->semValue = new Node\Type\BuiltinType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            129 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            130 => function ($stackPos) {
                 $this->semValue = new Node\Type\TagType\RecordType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            131 => function ($stackPos) {
                 $this->semValue = new Node\Type\TagType\EnumType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            132 => function ($stackPos) {
                 $this->semValue = new Node\Type\TypedefType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            133 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl($this->semStack[$stackPos-(6-1)], null, $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-2)] ?? $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            134 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl($this->semStack[$stackPos-(7-1)], $this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-2)] ?? $this->semStack[$stackPos-(7-7)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            135 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], null, $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            136 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl($this->semStack[$stackPos-(7-1)], $this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-2)] ?? $this->semStack[$stackPos-(7-7)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            137 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], null, $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            138 => function ($stackPos) {
                 $this->semValue = Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl::KIND_STRUCT; 
            },
            139 => function ($stackPos) {
                 $this->semValue = Node\Decl\NamedDecl\TypeDecl\TagDecl\RecordDecl::KIND_UNION; 
            },
            140 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            141 => function ($stackPos) {
                 $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); 
            },
            142 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileStructField($this->semStack[$stackPos-(2-1)][0], $this->semStack[$stackPos-(2-1)][1], $this->semStack[$stackPos-(2-1)][2], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            143 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileStructField($this->semStack[$stackPos-(3-1)][0], $this->semStack[$stackPos-(3-1)][1], $this->semStack[$stackPos-(3-1)][2], $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            144 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            145 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; array_unshift($this->semValue[2], $this->semStack[$stackPos-(2-1)]); 
            },
            146 => function ($stackPos) {
                 $this->semValue = [0, [], [$this->semStack[$stackPos-(1-1)]]]; 
            },
            147 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[0] |= $this->semStack[$stackPos-(2-1)]; 
            },
            148 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], [], []]; 
            },
            149 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[1][] = $this->semStack[$stackPos-(2-1)]; 
            },
            150 => function ($stackPos) {
                 $this->semValue = [0, [$this->semStack[$stackPos-(1-1)]], []]; 
            },
            151 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            152 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            153 => function ($stackPos) {
                 $this->semValue = new IR\FieldDeclaration(null, $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            154 => function ($stackPos) {
                 $this->semValue = new IR\FieldDeclaration($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            155 => function ($stackPos) {
                 $this->semValue = new IR\FieldDeclaration($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            156 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\EnumDecl(null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            157 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\EnumDecl(null, $this->semStack[$stackPos-(5-3)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            158 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\EnumDecl($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            159 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\EnumDecl($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            160 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\TypeDecl\TagDecl\EnumDecl($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            161 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            162 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            163 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\ValueDecl\EnumConstantDecl($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->scope->enumdef($this->semStack[$stackPos-(4-1)], $this->semValue); 
            },
            164 => function ($stackPos) {
                 $this->semValue = new Node\Decl\NamedDecl\ValueDecl\EnumConstantDecl($this->semStack[$stackPos-(1-1)], null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->scope->enumdef($this->semStack[$stackPos-(1-1)], $this->semValue); 
            },
            165 => function ($stackPos) {
                 throw new Error('atomic type_name not implemented'); 
            },
            166 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_CONST; 
            },
            167 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_RESTRICT; 
            },
            168 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_VOLATILE; 
            },
            169 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_ATOMIC; 
            },
            170 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_INLINE; 
            },
            171 => function ($stackPos) {
                 $this->semValue = Node\Decl::KIND_NORETURN; 
            },
            172 => function ($stackPos) {
                 throw new Error('alignas type_name not implemented'); 
            },
            173 => function ($stackPos) {
                 throw new Error('alignas constant_expression not implemented'); 
            },
            174 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[] = $this->semStack[$stackPos-(2-1)]; 
            },
            175 => function ($stackPos) {
                 $this->semValue = []; 
            },
            176 => function ($stackPos) {
                 $this->semValue = new Node\Decl\Specifiers\AttributeList($this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            177 => function ($stackPos) {
                 $this->semValue = new Node\Decl\Specifiers\AttributeList($this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            178 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)]]; 
            },
            179 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-1)]; $this->semValue[] = $this->semStack[$stackPos-(3-3)]; 
            },
            180 => function ($stackPos) {
                 $this->semValue = new Node\Decl\Specifiers\Attribute($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            181 => function ($stackPos) {
                 $this->semValue = new Node\Decl\Specifiers\Attribute($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            182 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(6-1)]; $this->semValue->declarator->attributeList = $this->semStack[$stackPos-(6-2)]; $this->semValue->declarator->declaratorAsm = $this->semStack[$stackPos-(6-5)]; 
            },
            183 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(6-1)]; $this->semValue->declarator->attributeList = $this->semStack[$stackPos-(6-6)]; $this->semValue->declarator->declaratorAsm = $this->semStack[$stackPos-(6-4)]; 
            },
            184 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)]; $this->semValue->declarator->attributeList = $this->semStack[$stackPos-(2-2)]; 
            },
            185 => function ($stackPos) {
                 $this->semValue = new IR\Declarator($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            186 => function ($stackPos) {
                 $this->semValue = new IR\Declarator(null, $this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            187 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            188 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            189 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\Declarator($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            190 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\IncompleteArray($this->semStack[$stackPos-(3-1)], 0, [], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            191 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(4-1)], null, 0, [], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            192 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-4)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(6-4)][1], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            193 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-4)], Node\Decl::KIND_STATIC, [], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            194 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(5-1)], null, $this->semStack[$stackPos-(5-3)][0], $this->semStack[$stackPos-(5-3)][1], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            195 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-3)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(6-3)][1], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            196 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-3)][0], $this->semStack[$stackPos-(5-3)][1], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            197 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\IncompleteArray($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)][0], $this->semStack[$stackPos-(4-3)][1], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            198 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\CompleteArray($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], 0, [], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            199 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\Function_($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)][0], $this->semStack[$stackPos-(4-3)][1], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            200 => function ($stackPos) {
                 $this->semValue = new IR\DirectDeclarator\Function_($this->semStack[$stackPos-(3-1)], [], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            201 => function ($stackPos) {
                 throw new Error('direct_declarator params identifier list not implemented'); 
            },
            202 => function ($stackPos) {
                 $this->semValue = new IR\QualifiedPointer($this->semStack[$stackPos-(3-2)][0], $this->semStack[$stackPos-(3-2)][1], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            203 => function ($stackPos) {
                 $this->semValue = new IR\QualifiedPointer($this->semStack[$stackPos-(2-2)][0], $this->semStack[$stackPos-(2-2)][1], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            204 => function ($stackPos) {
                 $this->semValue = new IR\QualifiedPointer(0, [], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            205 => function ($stackPos) {
                 $this->semValue = new IR\QualifiedPointer(0, [], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            206 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], []]; 
            },
            207 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(2-1)][0] | $this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)][1]]; 
            },
            208 => function ($stackPos) {
                 $this->semValue = [0, [$this->semStack[$stackPos-(1-1)]]]; 
            },
            209 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue[1][] = $this->semStack[$stackPos-(2-1)]; 
            },
            210 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(3-1)], true]; 
            },
            211 => function ($stackPos) {
                 $this->semValue = [$this->semStack[$stackPos-(1-1)], false]; 
            },
            212 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            213 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            214 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileParamVarDeclaration($this->semStack[$stackPos-(2-1)][0], $this->semStack[$stackPos-(2-1)][1], $this->semStack[$stackPos-(2-1)][2], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            215 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileParamAbstractDeclaration($this->semStack[$stackPos-(2-1)][0], $this->semStack[$stackPos-(2-1)][1], $this->semStack[$stackPos-(2-1)][2], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            216 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileParamAbstractDeclaration($this->semStack[$stackPos-(1-1)][0], $this->semStack[$stackPos-(1-1)][1], $this->semStack[$stackPos-(1-1)][2], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            217 => function ($stackPos) {
                 throw new Error('identifier_list identifier not implemented'); 
            },
            218 => function ($stackPos) {
                 throw new Error('identifier_list identifier_list identifier not implemented'); 
            },
            219 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileTypeReference($this->semStack[$stackPos-(2-1)][0], $this->semStack[$stackPos-(2-1)][1], $this->semStack[$stackPos-(2-1)][2], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            220 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileTypeReference($this->semStack[$stackPos-(1-1)][0], $this->semStack[$stackPos-(1-1)][1], $this->semStack[$stackPos-(1-1)][2], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            221 => function ($stackPos) {
                 $this->semValue = new IR\AbstractDeclarator($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            222 => function ($stackPos) {
                 $this->semValue = new IR\AbstractDeclarator($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            223 => function ($stackPos) {
                 $this->semValue = new IR\AbstractDeclarator(null, $this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            224 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\AbstractDeclarator($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            225 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\IncompleteArray(null, 0, [], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            226 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, null, 0, [], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            227 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, $this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-3)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(5-3)][1], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            228 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, $this->semStack[$stackPos-(4-3)], Node\Decl::KIND_STATIC, [], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            229 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, $this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-2)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(5-2)][1], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            230 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-2)][0], $this->semStack[$stackPos-(4-2)][1], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            231 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\IncompleteArray(null, $this->semStack[$stackPos-(3-2)][0], $this->semStack[$stackPos-(3-2)][1], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            232 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray(null, $this->semStack[$stackPos-(3-2)], 0, [], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            233 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\IncompleteArray($this->semStack[$stackPos-(3-1)], 0, [], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            234 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(4-1)], null, 0, [], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            235 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-4)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(6-4)][1], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            236 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-4)], Node\Decl::KIND_STATIC, [], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            237 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-5)], $this->semStack[$stackPos-(5-3)][0] | Node\Decl::KIND_STATIC, $this->semStack[$stackPos-(5-3)][1], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            238 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-3)][0], $this->semStack[$stackPos-(6-3)][1], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            239 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\IncompleteArray($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)][0], $this->semStack[$stackPos-(4-3)][1], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            240 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\CompleteArray($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], 0, [], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            241 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\Function_(null, [], false, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            242 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\Function_(null, $this->semStack[$stackPos-(4-2)][0], $this->semStack[$stackPos-(4-2)][1], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            243 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\Function_($this->semStack[$stackPos-(4-1)], [], false, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            244 => function ($stackPos) {
                 $this->semValue = new IR\DirectAbstractDeclarator\Function_($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)][0], $this->semStack[$stackPos-(5-3)][1], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            245 => function ($stackPos) {
                 $this->semValue = new Expr\InitializerExpr($this->semStack[$stackPos-(3-2)], null, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            246 => function ($stackPos) {
                 $this->semValue = new Expr\InitializerExpr($this->semStack[$stackPos-(4-2)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            247 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            248 => function ($stackPos) {
                 $this->semValue = array(new Expr\Initializer\InitializerElement($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes)); 
            },
            249 => function ($stackPos) {
                 $this->semValue = array(new Expr\Initializer\InitializerElement([], $this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes)); 
            },
            250 => function ($stackPos) {
                 $this->semStack[$stackPos-(4-1)][] = new Expr\Initializer\InitializerElement($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->semValue = $this->semStack[$stackPos-(4-1)]; 
            },
            251 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = new Expr\Initializer\InitializerElement([], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->semValue = $this->semStack[$stackPos-(3-1)]; 
            },
            252 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)]; 
            },
            253 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            254 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; 
            },
            255 => function ($stackPos) {
                 $this->semValue = new Expr\Initializer\InitializerDimension($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            256 => function ($stackPos) {
                 $this->semValue = new Expr\Initializer\InitializerStructRef($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            257 => function ($stackPos) {
                 throw new Error('static assert declaration not implemented'); 
            },
            258 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            259 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            260 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            261 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            262 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            263 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            264 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            265 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-4)]; $this->semValue->labels[] = new Node\Stmt\Label\IdentifiedLabel($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            266 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-4)]; $this->semValue->labels[] = new Node\Stmt\Label\CaseLabel($this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            267 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-3)]; $this->semValue->labels[] = new Node\Stmt\Label\DefaultLabel($this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            268 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\CompoundStmt([], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            269 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\CompoundStmt($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            270 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            271 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; 
            },
            272 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileDeclarationStmt($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            273 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            274 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\EmptyStmt($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            275 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)]; 
            },
            276 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\IfStmt($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-7)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            277 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\IfStmt($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], null, $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            278 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\SwitchStmt($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            279 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\LoopStmt($this->semStack[$stackPos-(5-3)], null, null, $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            280 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\DoLoopStmt($this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            281 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\LoopStmt($this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-3)], null, $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            282 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\LoopStmt($this->semStack[$stackPos-(7-4)], $this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-7)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            283 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\LoopStmt($this->semStack[$stackPos-(6-4)], $this->compiler->compileDeclarationStmt($this->semStack[$stackPos-(6-3)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes), null, $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            284 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\LoopStmt($this->semStack[$stackPos-(7-4)], $this->compiler->compileDeclarationStmt($this->semStack[$stackPos-(7-3)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes), $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-7)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            285 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\GotoStmt($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            286 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\ContinueStmt($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            287 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\BreakStmt($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            288 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\ReturnStmt(null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); 
            },
            289 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\ReturnStmt($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            290 => function ($stackPos) {
                 $this->semValue = new Node\TranslationUnitDecl($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            291 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)]; $this->semValue->addDecl(...$this->semStack[$stackPos-(2-2)]); 
            },
            292 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            293 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileExternalDeclaration($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            294 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileFunction($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-1)][2], $this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            295 => function ($stackPos) {
                 $this->semValue = $this->compiler->compileFunction($this->semStack[$stackPos-(3-1)][0], $this->semStack[$stackPos-(3-1)][1], $this->semStack[$stackPos-(3-1)][2], $this->semStack[$stackPos-(3-2)], [], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            296 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]); 
            },
            297 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; 
            },
            298 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(6-1)]; $this->semValue->operands[] = new Node\Asm\Operand($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); 
            },
            299 => function ($stackPos) {
                 $this->semValue = new Node\Asm\Operands($this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->semValue->operands[] = new Node\Asm\Operand($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); 
            },
            300 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            301 => function ($stackPos) {
                 $this->semValue = new Node\Asm\Operands; 
            },
            302 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-1)]; $this->semValue->registers[] = $this->semStack[$stackPos-(3-3)]; 
            },
            303 => function ($stackPos) {
                 $this->semValue = new Node\Asm\Registers($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->semValue->registers[] = $this->semStack[$stackPos-(1-1)]; 
            },
            304 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            305 => function ($stackPos) {
                 $this->semValue = new Node\Asm\Registers; 
            },
            306 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-1)]; $this->semValue->labels[] = $this->semStack[$stackPos-(3-3)]; 
            },
            307 => function ($stackPos) {
                 $this->semValue = new Node\Asm\GotoLabels($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->semValue->labels[] = $this->semStack[$stackPos-(1-1)]; 
            },
            308 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; 
            },
            309 => function ($stackPos) {
                 $this->semValue = new Node\Asm\GotoLabels; 
            },
            310 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\AsmStmt($this->semStack[$stackPos-(1-1)], new Node\Asm\Operands, new Node\Asm\Operands, new Node\Asm\Registers, new Node\Asm\GotoLabels, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); 
            },
            311 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\AsmStmt($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], new Node\Asm\Operands, new Node\Asm\Registers, new Node\Asm\GotoLabels, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); 
            },
            312 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\AsmStmt($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], new Node\Asm\Registers, new Node\Asm\GotoLabels, $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); 
            },
            313 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\AsmStmt($this->semStack[$stackPos-(7-1)], $this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)], $this->semStack[$stackPos-(7-7)], new Node\Asm\GotoLabels, $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes); 
            },
            314 => function ($stackPos) {
                 $this->semValue = new Node\Stmt\AsmStmt($this->semStack[$stackPos-(9-1)], $this->semStack[$stackPos-(9-3)], $this->semStack[$stackPos-(9-5)], $this->semStack[$stackPos-(9-7)], $this->semStack[$stackPos-(9-9)], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes); 
            },
            315 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)] | Node\Stmt\AsmStmt::VOLATILE; 
            },
            316 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)] | Node\Stmt\AsmStmt::GOTO; 
            },
            317 => function ($stackPos) {
                 $this->semValue = 0; 
            },
            318 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(6-4)]; $this->semValue->modifiers = $this->semStack[$stackPos-(6-2)]; 
            },
        ];
    }
}
